{
  "name": "mtgql",
  "word": "no_quote_string",
  "rules": {
    "query": {
      "type": "SYMBOL",
      "name": "_filter"
    },
    "_filter": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "unary_statement"
        },
        {
          "type": "SYMBOL",
          "name": "bool_statement"
        }
      ]
    },
    "unary_statement": {
      "type": "SEQ",
      "members": [
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "STRING",
              "value": "-"
            },
            {
              "type": "BLANK"
            }
          ]
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "SYMBOL",
              "name": "parentheses"
            },
            {
              "type": "SYMBOL",
              "name": "_condition"
            }
          ]
        }
      ]
    },
    "bool_statement": {
      "type": "PREC_LEFT",
      "value": 1,
      "content": {
        "type": "SEQ",
        "members": [
          {
            "type": "SYMBOL",
            "name": "_filter"
          },
          {
            "type": "SYMBOL",
            "name": "bool_operator"
          },
          {
            "type": "SYMBOL",
            "name": "_filter"
          }
        ]
      }
    },
    "parentheses": {
      "type": "SEQ",
      "members": [
        {
          "type": "STRING",
          "value": "("
        },
        {
          "type": "SYMBOL",
          "name": "_filter"
        },
        {
          "type": "STRING",
          "value": ")"
        }
      ]
    },
    "_condition": {
      "type": "CHOICE",
      "members": [
        {
          "type": "PREC",
          "value": 2,
          "content": {
            "type": "SYMBOL",
            "name": "cmc_condition"
          }
        },
        {
          "type": "PREC",
          "value": 2,
          "content": {
            "type": "SYMBOL",
            "name": "name_condition"
          }
        },
        {
          "type": "PREC",
          "value": 1,
          "content": {
            "type": "SYMBOL",
            "name": "exact_name_condition"
          }
        }
      ]
    },
    "cmc_condition": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "cmc_filter"
        },
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "PREC",
              "value": 2,
              "content": {
                "type": "SEQ",
                "members": [
                  {
                    "type": "SYMBOL",
                    "name": "_num_or_equal_operator"
                  },
                  {
                    "type": "SYMBOL",
                    "name": "number"
                  }
                ]
              }
            },
            {
              "type": "PREC",
              "value": 1,
              "content": {
                "type": "SEQ",
                "members": [
                  {
                    "type": "SYMBOL",
                    "name": "equal_operator"
                  },
                  {
                    "type": "SYMBOL",
                    "name": "odd_even"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "cmc_filter": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "cmc"
        },
        {
          "type": "STRING",
          "value": "mv"
        },
        {
          "type": "STRING",
          "value": "manavalue"
        }
      ]
    },
    "exact_name_condition": {
      "type": "SEQ",
      "members": [
        {
          "type": "CHOICE",
          "members": [
            {
              "type": "FIELD",
              "name": "exact_match",
              "content": {
                "type": "STRING",
                "value": "!"
              }
            },
            {
              "type": "BLANK"
            }
          ]
        },
        {
          "type": "SYMBOL",
          "name": "_stringish_value"
        }
      ]
    },
    "name_condition": {
      "type": "SEQ",
      "members": [
        {
          "type": "SYMBOL",
          "name": "name_filter"
        },
        {
          "type": "SYMBOL",
          "name": "equal_operator"
        },
        {
          "type": "SYMBOL",
          "name": "_stringish_value"
        }
      ]
    },
    "name_filter": {
      "type": "CHOICE",
      "members": [
        {
          "type": "STRING",
          "value": "name"
        },
        {
          "type": "STRING",
          "value": "n"
        }
      ]
    },
    "bool_operator": {
      "type": "TOKEN",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "PREC",
            "value": 2,
            "content": {
              "type": "STRING",
              "value": " and "
            }
          },
          {
            "type": "PREC",
            "value": 2,
            "content": {
              "type": "STRING",
              "value": " or "
            }
          },
          {
            "type": "PREC",
            "value": 1,
            "content": {
              "type": "STRING",
              "value": " "
            }
          }
        ]
      }
    },
    "_num_or_equal_operator": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "number_operator"
        },
        {
          "type": "SYMBOL",
          "name": "equal_operator"
        }
      ]
    },
    "number_operator": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "STRING",
            "value": "!="
          },
          {
            "type": "STRING",
            "value": "<>"
          },
          {
            "type": "STRING",
            "value": ">="
          },
          {
            "type": "STRING",
            "value": "<="
          },
          {
            "type": "STRING",
            "value": ">"
          },
          {
            "type": "STRING",
            "value": "<"
          }
        ]
      }
    },
    "equal_operator": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "STRING",
            "value": ":"
          },
          {
            "type": "STRING",
            "value": "="
          }
        ]
      }
    },
    "number": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "PATTERN",
        "value": "\\d+"
      }
    },
    "odd_even": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "CHOICE",
        "members": [
          {
            "type": "STRING",
            "value": "odd"
          },
          {
            "type": "STRING",
            "value": "even"
          }
        ]
      }
    },
    "_stringish_value": {
      "type": "CHOICE",
      "members": [
        {
          "type": "SYMBOL",
          "name": "no_quote_string"
        },
        {
          "type": "SYMBOL",
          "name": "single_quote_string"
        },
        {
          "type": "SYMBOL",
          "name": "double_quote_string"
        },
        {
          "type": "SYMBOL",
          "name": "regex"
        }
      ]
    },
    "no_quote_string": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "PATTERN",
        "value": "\\w[\\w-]*"
      }
    },
    "single_quote_string": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "PATTERN",
        "value": "'(?:\\\\['\\\\]|[^\\n'\\\\])*'"
      }
    },
    "double_quote_string": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "PATTERN",
        "value": "\"(?:\\\\[\"\\\\]|[^\\n\"\\\\])*\""
      }
    },
    "regex": {
      "type": "IMMEDIATE_TOKEN",
      "content": {
        "type": "PATTERN",
        "value": "\\/(?:\\\\[\\/\\\\a-zA-Z]|[^\\n\\/\\\\])*\\/"
      }
    }
  },
  "extras": [
    {
      "type": "PATTERN",
      "value": "\\s"
    }
  ],
  "conflicts": [],
  "precedences": [],
  "externals": [],
  "inline": [],
  "supertypes": []
}
